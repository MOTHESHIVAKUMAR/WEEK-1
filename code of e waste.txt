import numpy as np
import pandas as pd
import matplotlib.pyplot as plot
import tensorflow as tf
from tensorflow import keras
from tensorflow import keras
from tensorflow.keras import layers

data_train_path = 'E waste_images/train'
data_test_path = 'E waste_images/test'
data_val_path = 'E waste_images/validation'

img_width = 128
img_height = 128


data_train= tf.keras.utils.image_dataset_from_directory(trainpath,shuffle = True, image_size = (128,128), batch_size = 32, validation_split= False)

Found 2400 files belonging to 10 classes.

data_test=tf.keras.utils.image_dataset_from_directory(testpath,shuffle = False, image_size = (128,128), batch_size = 32, validation_split= False)

Found 300 files belonging to 10 classes

data_valid = tf.keras.utils.image_dataset_from_directory(validpath,shuffle = True, image_size = (128,128), batch_size = 32, validation_split= False)

Found 300 files belonging to 10 classes.

print(len(datatrain.class_names))
class_names = datatrain.class_names
print(class_names)

10
['Battery', 'Keyboard', 'Microwave', 'Mobile', 'Mouse', 'PCB', 'Player', 'Printer', 'Television', 'Washing Machine']

plt.figure(figsize=(10, 10))


for images, labels in datatrain.take(1):

    for i in range(12):
               ax = plt.subplot(4, 3, i + 1)

        
        plt.imshow(images[i].numpy().astype("uint8"))

       
        plt.title(class_names[labels[i]])
        plt.axis("off")

def plot_class_distribution(dataset, title="Class Distribution"):

    class_counts = {}  
        for images, labels in dataset:
                for label in labels.numpy():
            class_name = dataset.class_names[label]  
            class_counts[class_name] = class_counts.get(class_name, 0) + 1

 
    class_names = list(class_counts.keys())  
    counts = list(class_counts.values())    
    plt.figure(figsize=(10, 6)) 
    plt.bar(class_names, counts, color='skyblue')  
    plt.xlabel("Class")  
    plt.ylabel("Number of Items")  
    plt.title(title) 
    plt.xticks(rotation=45)  
    plt.tight_layout()  
    plt.show()  # Display the plot

plot_class_distribution(datatrain, "Training Data Distribution")
plot_class_distribution(datavalid, "Validation Data Distribution")
plot_class_distribution(datatest, "Test Data Distribution")

data_augmentation = tf.keras.Sequential([
    tf.keras.layers.RandomFlip("horizontal"),
    tf.keras.layers.RandomRotation(0.1),
    tf.keras.layers.RandomZoom(0.1),
])
base_model = tf.keras.applications.EfficientNetV2B0(
    input_shape=(128, 128, 3),
    include_top=False,
    weights='imagenet'
)
base_model.trainable = True
for layer in base_model.layers[:100]:
    layer.trainable = False

model = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(128, 128, 3)),
    data_augmentation,
    base_model,
    tf.keras.layers.GlobalAveragePooling2D(),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(10, activation='softmax')
])
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001),loss = tf.keras.losses.SparseCategoricalCrossentropy(), metrics=['Accuracy'])
early = tf.keras.callbacks.EarlyStopping(
    monitor='val_loss',           
    patience=3,                   
    restore_best_weights=True     
)
epochs = 15

# Train the model on the training dataset 'datatrain'
history = model.fit(
    datatrain,                      
    validation_data=datavalid,          
   epochs=epochs,                 
    batch_size=100,                
    callbacks=[early]               )
model.summary() 
base_model.summary(
loss, accuracy = model.evaluate(datatest)
print(f'Test accuracy is{accuracy:.4f}, Test loss is {loss:.4f}')
### Evaluate Model Performance on Test Data using Confusion Matrix and Classification Report

y_true = np.concatenate([y.numpy() for x, y in datatest], axis=0)  


y_pred_probs = model.predict(datatest)

y_pred = np.argmax(y_pred_probs, axis=1)                           

print(confusion_matrix(y_true, y_pred))                            
print(classification_report(y_true, y_pred))                     

cm = confusion_matrix(y_true, y_pred)                                                                                       
plt.figure(figsize=(10, 8))                                            
   sns.heatmap(cm, annot=True, fmt='d', 
            xticklabels=class_names, 
            yticklabels=class_names, 
            cmap='Blues')                                                
plt.xlabel('Predicted')
plt.ylabel('True')                                                                                                  
plt.title('Confusion Matrix')         
plt.show()       
                                                        
class_names = datatest.class_names                                           
for images, labels in datatest.take(1):                                        
 predictions = model.predict(images)                                     
    pred_labels = tf.argmax(predictions, axis=1)                            


    for i in range(8):                                                            
 plt.title(f"True: {class_names[labels[i]]}, Pred: {class_names[pred_labels[i]]}")  
        plt.axis("off")                                                     
        plt.imshow(images[i].numpy().astype("uint8"))                       
        plt.show()                        

model.save('Efficient_classify.keras')

class_names = ['Battery', 'Keyboard', 'Microwave', 'Mobile', 'Mouse', 'PCB', 'Player', 'Printer', 'Television', 'Washing Machine']

model = tf.keras.models.load_model('Efficient_classify.keras')


def classify_image(img):
   
    img = img.resize((128, 128))
    img_array = np.array(img, dtype=np.float32)


    img_array = preprocess_input(img_array)
    img_array = np.expand_dims(img_array, axis=0)
    prediction = model.predict(img_array)
    index = np.argmax(prediction)  # Get index of highest score

        class_name = class_names[index]
    confidence = prediction[0][index]

    return f"Predicted: {class_name} (Confidence: {confidence:.2f})"
iface = gr.Interface(
    fn=classify_image,          # The function to run when input is given
    inputs=gr.Image(type="pil"), # Input component: expects an image as a PIL object
    outputs="text"              # Output component: displays the result as plain text
)

iface.launch()
